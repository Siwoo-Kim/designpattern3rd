

디자인 패턴이 필요한 이유.
    소프트웨어 개발에 있어서 바뀌지 않는 것은 변화이다.
        - 변화가 생기면 문제를 해결하기 위한 알고리즘이 변경될 수 있다.
        - 대부분의 패턴과 원칙은 소프트웨어의 변경 문제와 관련되어 있다.
        - 디자인 패턴은 특정 컨텍스트내에서 발생되는 문제를 위한 (널리 알려진) 해결책이다.
        - 패턴은 훌륭한 객체지향 디자인 품질을 갖추고 있는 시스템을 만드는 방법을 제공한다. (디자인 패턴을 사용한다고 항상 품질이 만족되는 것은 아니다. 가장 심플한 코드가 최고임을 명심하자.)
        - 디자인 패턴을 알아두면 다른 개발자들과의 의사 소통이 극대화 된다.

디자인 원칙.
    1. 달라지는 부분과 달라지지 않는 부분을 분리하라.
        바뀌는 부분을 따로 뽑아서 분리함을 "캡슐화"라고 한다.
        이렇게 한다면 바뀌지 않은 부분은 영향이 미치지 않은 채, 바뀌는 부분만 확장, 변경이 용이해진다.

    2. 구현 (Implementation) 이 아닌 인터페이스에 맞춰서 프로그래밍한다.
        Program to an interface means that all parameters and all declared return types are interfaces.
        That allows you to change implementation (classes) without changing the core of your code, just the calling code.
        구현에 맞춰서 프로그래밍 한다면, 구현이 바뀔때는 구현을 알고 있는 모든 모듈에서 코드가 변경된다.
        하지만 인터페이스에 맞춰서 프로그래밍하면, 초기 생성 부분만 변경하면 되므로 변화에 용이하다.
            - 초기 생성 부분 또한 Abstract Factory 패턴을 이용하여 "캡슐화"가 가능하다!

    3. 상속보단 구성 (Composition) 을 활용한다.
        상속의 단점은 추상 클래스에 기능이 추가 혹은 변경되었을때 자식 클래스에게 영향이 끼치며, 관리가 용이하지 않다.
        구성을 이용하여 시스템을 만들면 유연성이 크게 향상될 수 있다.
        An implementation of composition over inheritance typically begins with the creation of various interfaces representing the behaviors(*) that the system must exhibit.
        Interfaces enable polymorphic behavior.
        Classes implementing the identified interfaces are built and added to business domain classes as needed.
        In fact, business domain classes may all be base classes without any inheritance at all.
        Alternative implementation of system behaviors is accomplished by providing another class that implements the desired behavior interface.
        A class that contain a reference to an interface can support implementations of the interface - a choice that can be delayed until run time.
        Strategy 패턴과 구성.
            - 특정 변경가능한 알고리즘 군을 캡슐화(디자인 원칙:1) 하여 행동을 위임하면
            변경이 끼쳤을 땐 특정 알고리즘만 변경하므로 관리하기 편하고, 상속이 아닌 구성이므로 실행시 동적으로 알고리즘의 교체가 가능하여 유연하다.

    4. 서로 상호작용을 하는 객체 사이에서는 가능하면 느슨하게 결합(Loose Coupling)하는 디자인을 사용하라.
        느슨한 결합으로 두 객체를 엮을려면 두 객체는 서로간의 "최소한의 정보"만을 알아야 한다.
        In computing and systems design a loosely coupled system is one in which each of its components has, or makes use of, little or no knowledge of the definitions of other separate components.
        Subareas include the coupling of classes, interfaces, data, and services. Loose coupling is the opposite of tight coupling.
            두 객체간 최소한의 정보만 알면서 의사소통 하는 법?
                1. 인터페이스에 맞춰서 프로그래밍한다(디자인 원칙2:)
                2. 두 객체안에서는 상대방의 구현 클래스를 숨겨라.

디자인 패턴 카탈로그
    Strategy Pattern.
        - 알고리즘군(Set)을 정의하고 각각을 캡슐화하여 교환해서 사용할 수 있도록 만든다.
        스트레지을 활용하면 알고리즘을 사용하는 클라이언트와 독립적으로 알고리즘을 변경할 수 있다.
        특징.
            변경되는 부분을 캡슐화하여 알고리즘군으로 정의한다.
            상속이 아닌 구성을 활용한다.
            알고리즘군의 인터페이스를 통한 다형성을 활용한다.

    Observer Pattern.
        - 한 객체(Subject)의 상태가 바뀌면 그 객체에 의존하는 다른 객체(Observer)한테 연락이 가고
        자동으로 내용이 갱신되는 방식으로 일대다(one-to-many) 의존성을 정의.

        Observer: 관찰자 혹은 구독자 (Subscriber)
        Subject(Observable): 데이터를 관리하는 주제 혹은 관찰하는 대상.

        이벤트 프로그래밍과 Observer 패턴의 관계.
            - Listener (Event Handler) 은 상태의 변화를 주시하는 Observer 이다.
            - Button 은 상태를 가지고 Observer 에게 notify 하는 Observable 이다.
        특징.
            Observable(Subject) 과 Observer 의 관계. (일대다)
            Loose Coupling. (Observable, Observer 인터페이스를 통한 서로의 정보 최소화)
            Push 방식(Observable 에서 push 할 데이터를 선정)과 Pull 방식(this 를 전달하므로 옵저버가 원하는 데이터를 직접 가져옴).



